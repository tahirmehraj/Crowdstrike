# Kubernetes Service for Demo API - LoadBalancer Configuration
# ============================================================
# This service creates an AWS Network Load Balancer for external access
# Provides internet-facing endpoint for the Flask API

apiVersion: v1
kind: Service
metadata:
  name: demo-api-service
  namespace: default
  labels:
    app: demo-api
    component: service
    managed-by: kubernetes
  annotations:
    # AWS LoadBalancer configuration for EKS
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"                    # Use Network Load Balancer
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"     # External access from internet
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

    # Prometheus monitoring annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
    prometheus.io/path: "/metrics"

    # Service description
    description: "LoadBalancer service for Demo API providing external internet access"
spec:
  # LoadBalancer type creates AWS Network Load Balancer
  type: LoadBalancer

  # Pod selector - routes traffic to pods with these exact labels
  selector:
    app: demo-api
    component: api

  # Port configuration
  ports:
  - name: http
    port: 80              # External port (what internet clients connect to)
    targetPort: 5000      # Internal port (where Flask app listens)
    protocol: TCP

  # LoadBalancer-specific settings
  sessionAffinity: None                    # Round-robin load balancing
  externalTrafficPolicy: Cluster          # Distribute traffic across all nodes

  # Optional: Specify source IP ranges that can access the LoadBalancer
  # loadBalancerSourceRanges:
  # - "0.0.0.0/0"  # Allow from anywhere (default)
  # - "10.0.0.0/8"  # Restrict to private networks only